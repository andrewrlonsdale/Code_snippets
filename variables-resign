def visualize_trace_and_save_final(trace_steps, output_path="variable_trace_flowchart.png"):
    """
    Visualizes the traced variable dependencies as a spaced-out flowchart and saves the image.

    - SQL queries are colored red.
    - File reads are colored orange.
    - DataFrame transformations are colored light blue.

    Args:
    - trace_steps (list of str): List of tracing steps showing variable assignments.
    - output_path (str): File path to save the output image.
    """
    G = nx.DiGraph()
    node_labels = {}
    node_colors = {}

    prev_node = None

    for step in trace_steps:
        step = step.strip()
        if " = " in step:
            var, expr = step.split(" = ", 1)
            G.add_node(var)
            formatted_expr = "\n".join(expr[i:i+30] for i in range(0, len(expr), 30))  # Wrap text every 30 chars
            node_labels[var] = f"{var}\n({formatted_expr})"

            # Determine node color
            if "SQL Query:" in expr:
                node_colors[var] = "red"  # SQL Query
            elif "File Read" in expr:
                node_colors[var] = "orange"  # File read
            else:
                node_colors[var] = "lightblue"  # Standard dataframe operation

            if prev_node:
                G.add_edge(var, prev_node)

            prev_node = var

    # Adjust spacing with a force-directed layout (Kamada-Kawai for better readability)
    plt.figure(figsize=(16, 10))
    pos = nx.kamada_kawai_layout(G)  # Optimized for spacing

    node_list = list(G.nodes())
    node_color_list = [node_colors.get(n, "lightblue") for n in node_list]

    nx.draw(G, pos, with_labels=True, node_color=node_color_list, edge_color="gray",
            node_size=4500, font_size=10, arrows=True, cmap=plt.cm.Paired)

    # Draw node labels with better spacing
    for node, (x, y) in pos.items():
        plt.text(x, y + 0.05, node_labels[node], fontsize=9, ha="center", va="center", bbox=dict(facecolor="white", alpha=0.6, edgecolor="black"))

    plt.title("Variable Trace Flowchart", fontsize=14)
    plt.savefig(output_path, dpi=300, bbox_inches="tight")
    plt.close()

    return output_path

# Generate the visualization and save it
output_file = "variable_trace_flowchart.png"
output_path = visualize_trace_and_save_final(trace_steps_example, output_file)

# Provide download link
import shutil
download_path = f"/mnt/data/{output_file}"
shutil.move(output_file, download_path)
download_path
