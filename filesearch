import os
import json
import re
import csv
from rich.console import Console
from rich.table import Table

# Define the table name to search for
table_name = ""

# Set the root directory to search for notebooks (adjust as needed)
root_dir = ""

# Initialize a total count of cells with matches
total_matches = 0

# List to store results for CSV output
csv_results = []

def reconstruct_vertical_text(vertical_text):
    """
    Reconstruct vertically aligned text into horizontal text.
    Each column of characters is joined to form a horizontal string.
    """
    lines = vertical_text.splitlines()
    if not lines:
        return ""
    max_length = max(len(line) for line in lines)
    reconstructed = ""
    for i in range(max_length):
        for line in lines:
            if i < len(line):
                reconstructed += line[i]
        reconstructed += " "  # Add space between reconstructed words
    return reconstructed.strip()

def clean_snippet(snippet):
    """
    Clean the content snippet by removing Markdown, HTML, and CSS.
    """
    # Remove HTML tags
    snippet = re.sub(r"<[^>]+>", "", snippet)
    # Remove Markdown links (e.g., [text](url)) and preserve only the text
    snippet = re.sub(r"\[([^\]]+)\]\([^)]+\)", r"\1", snippet)
    # Remove Markdown headers (e.g., # Header, ## Header)
    snippet = re.sub(r"^#{1,6}\s+", "", snippet, flags=re.MULTILINE)
    # Remove Markdown emphasis and inline code (e.g., **bold**, *italic*, `code`, __underline__, ~~strike~~)
    snippet = re.sub(r"(\*\*|\*|__|_|`|~~)", "", snippet)
    # Remove Markdown blockquotes and list markers (e.g., >, -, *)
    snippet = re.sub(r"(^|\n)[>\-\*]\s+", r"\1", snippet)
    # Remove CSS or inline style declarations within curly braces
    snippet = re.sub(r"{[^}]+}", "", snippet)
    # Remove extra whitespace
    snippet = re.sub(r"\s+", " ", snippet).strip()
    return snippet

def truncate(text, limit=100):
    """
    Truncate the text to a maximum length of 100 characters, adding an ellipsis if needed.
    """
    return text if len(text) <= limit else text[:limit] + "..."

# Set up Rich console and table
console = Console()
results_table = Table(title="Notebook Search Results", show_header=True, show_lines=True)
results_table.add_column("Notebook", style="dim", no_wrap=False)
results_table.add_column("Cell Number", justify="center")
results_table.add_column("Match Type", style="green")
results_table.add_column("Content Snippet", style="cyan", overflow="fold")

# Walk through all files and subdirectories starting from root_dir
for dirpath, dirnames, filenames in os.walk(root_dir):
    for filename in filenames:
        # Process only Jupyter Notebook files
        if filename.endswith(".ipynb"):
            notebook_path = os.path.join(dirpath, filename)
            try:
                with open(notebook_path, "r", encoding="utf-8") as nb_file:
                    notebook = json.load(nb_file)
            except Exception as e:
                console.print(f"[red]Error reading notebook {notebook_path}: {e}[/red]")
                continue

            # Use enumerate for accurate cell counting (starting from 1)
            for cell_index, cell in enumerate(notebook.get("cells", []), start=1):
                combined_match_types = set()
                combined_snippets = []

                # Check cell source – show full snippet
                cell_source = "".join(cell.get("source", []))
                if table_name in cell_source:
                    full_snippet = clean_snippet(cell_source)
                    combined_match_types.add("Source")
                    combined_snippets.append("Source:\n" + full_snippet)

                # Check outputs – truncate snippet to 100 characters
                for output in cell.get("outputs", []):
                    if "text" in output:
                        output_text = "".join(output.get("text", []))
                        reconstructed_text = reconstruct_vertical_text(output_text)
                        if table_name in output_text:
                            raw_text = clean_snippet(output_text)
                            truncated_text = truncate(raw_text, 100)
                            combined_match_types.add("Horizontal Output")
                            combined_snippets.append("Horizontal Output:\n" + truncated_text)
                        elif table_name in reconstructed_text:
                            raw_text = clean_snippet(output_text)
                            truncated_text = truncate(raw_text, 100)
                            combined_match_types.add("Output (Text)")
                            combined_snippets.append("Output (Text):\n" + truncated_text)
                    if "data" in output:
                        for key, value in output.get("data", {}).items():
                            if isinstance(value, list):
                                output_data = "".join(value)
                            else:
                                output_data = str(value)
                            reconstructed_data = reconstruct_vertical_text(output_data)
                            if table_name in output_data:
                                raw_text = clean_snippet(output_data)
                                truncated_text = truncate(raw_text, 100)
                                combined_match_types.add("Horizontal Output")
                                combined_snippets.append("Horizontal Output (data):\n" + truncated_text)
                            elif table_name in reconstructed_data:
                                raw_text = clean_snippet(output_data)
                                truncated_text = truncate(raw_text, 100)
                                combined_match_types.add("Output (Data)")
                                combined_snippets.append("Output (Data):\n" + truncated_text)

                # If the cell contains any match, add one row to the table
                if combined_snippets:
                    match_type_str = ", ".join(sorted(combined_match_types))
                    cell_snippets = "\n\n---\n\n".join(combined_snippets)
                    results_table.add_row(notebook_path, str(cell_index), match_type_str, cell_snippets)
                    csv_results.append([notebook_path, cell_index, match_type_str, cell_snippets])
                    total_matches += 1

# Display the results table using Rich
if total_matches > 0:
    console.print(results_table)
else:
    console.print(f"[bold red]No occurrences of '{table_name}' found in any notebook.[/bold red]")

# Save results to a CSV file
csv_file_path = "results.csv"
with open(csv_file_path, "w", newline="", encoding="utf-8") as csv_file:
    writer = csv.writer(csv_file)
    writer.writerow(["Notebook", "Cell Number", "Match Type", "Content Snippet"])
    writer.writerows(csv_results)

console.print(f"\nResults have been saved to '{csv_file_path}'.")
console.print(f"\nTotal number of cells with '{table_name}': {total_matches}")
