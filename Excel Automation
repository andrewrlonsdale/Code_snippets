Excel Automation

import openpyxl
import pandas as pd
from datetime import datetime

# Set string variables for 'Cover Page'
value_a1 = "String 1"
value_b1 = "String 2"
value_c1 = "String 3"

# Your DataFrame data for '2nd tab'
data = {
    'Column1': [1, 2, 3, 4],
    'Column2': [5, 6, 7, 8],
    # Add more columns if needed
}
df = pd.DataFrame(data)

# Path to your template Excel file
template_path = 'path_to_your_template_file.xlsx'

# Load the Excel workbook
workbook = openpyxl.load_workbook(template_path)

# Modify 'Cover Page'
cover_page = workbook['Cover Page']
cover_page['A1'] = value_a1
cover_page['B1'] = value_b1
cover_page['C1'] = value_c1

# Update  '2nd tab'
data_sheet = workbook['2nd']
for row in data_sheet.iter_rows(min_row=1, max_col=data_sheet.max_column, max_row=data_sheet.max_row):
    for cell in row:
        cell.value = None
for row_index, row in enumerate(df.itertuples(index=False), start=1):
    for col_index, value in enumerate(row, start=1):
        data_sheet.cell(row=row_index, column=col_index, value=value)

# Save the workbook with a new name
new_file_name = 'modified_file_' + datetime.now().strftime('%Y%m%d%H%M%S') + '.xlsx'
workbook.save(new_file_name)














import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import NamedStyle


# Define a percentage style for Excel
percent_style = NamedStyle(name='percent', number_format='0.00%')


# Process each variable and store results in a dictionary
results = {variable: process_variable(variable) for variable in variables}

# Write the results to an Excel file
with pd.ExcelWriter('/mnt/data/output_both_dataframes.xlsx', engine='openpyxl') as writer:
    for variable, (df1, df2) in results.items():
        # Write df1 to the Excel sheet
        df1.to_excel(writer, sheet_name=variable, index=False, startrow=0, startcol=0)
        
        # Calculate the starting column for df2 (max columns in df1 + 4 cells space)
        startcol = df1.shape[1] + 4
        
        # Write df2 to the Excel sheet
        df2.to_excel(writer, sheet_name=variable, index=False, startrow=0, startcol=startcol)
        
        # Apply percentage formatting
        for row in writer.sheets[variable].iter_rows(min_row=2, max_row=df1.shape[0] + 1, min_col=df1.columns.get_loc('null_percentage') + 2, max_col=df1.columns.get_loc('count_percentage') + 2):
            for cell in row:
                cell.style = percent_style

'/mnt/data/output_both_dataframes.xlsx'












