import pandas as pd
import warnings

# Suppress future warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# Define table, schema, and full table reference
schema_name = "your_schema_name"
table_name = "your_table_name_here"
full_table_name = f"{schema_name}.{table_name}"  # Schema and table name

# Fetch schema information
schema_query = f"""
SELECT column_name, data_type
FROM information_schema.columns
WHERE table_schema = '{schema_name}' AND table_name = '{table_name}'
"""
df_schema = cursor.execute(schema_query).as_pandas()
df_schema['category_type'] = None  # Initialize category type column

# Construct and execute a unified unique count query
unique_count_query = " UNION ALL ".join([
    f"SELECT '{col}' AS column_name, COUNT(DISTINCT {col}) AS unique_count FROM {full_table_name}"
    for col in df_schema['column_name']
])
unique_counts = cursor.execute(unique_count_query).as_pandas()
unique_counts.set_index('column_name', inplace=True)

# Update category types based on data types and unique counts
for index, row in df_schema.iterrows():
    col_name = row['column_name']
    data_type = row['data_type']
    unique_count = unique_counts.loc[col_name, 'unique_count']

    if data_type in ['varchar', 'string'] and unique_count > 100:
        df_schema.at[index, 'category_type'] = 'continuous'
    elif data_type in ['integer', 'bigint', 'date'] and unique_count < 3:
        df_schema.at[index, 'category_type'] = 'categorical'
    else:
        df_schema.at[index, 'category_type'] = 'categorical' if data_type in ['varchar', 'string'] else 'continuous'

# Separate queries for continuous and categorical columns
continuous_query_parts = []
categorical_query_parts = []

for index, row in df_schema.iterrows():
    col_name = row['column_name']
    if row['category_type'] == 'continuous':
        query = f"SELECT '{col_name}' AS field_name, COALESCE(MIN({col_name}), 'Not Applicable') AS min, COALESCE(MAX({col_name}), 'Not Applicable') AS max, 'Not Applicable' AS top_5 FROM {full_table_name}"
        continuous_query_parts.append(query)
    else:
        query = f"SELECT '{col_name}' AS field_name, 'Not Applicable' AS min, 'Not Applicable' AS max, ARRAY_TO_STRING(ARRAY_AGG(DISTINCT {col_name} ORDER BY COUNT(*) DESC LIMIT 5), ', ') AS top_5 FROM {full_table_name} GROUP BY {col_name}"
        categorical_query_parts.append(query)

# Union all continuous and categorical queries
continuous_query = " UNION ALL ".join(continuous_query_parts)
categorical_query = " UNION ALL ".join(categorical_query_parts)

# Execute queries and fetch results
continuous_stats = cursor.execute(continuous_query).as_pandas()
categorical_stats = cursor.execute(categorical_query).as_pandas()

# Combine results into a final DataFrame
final_df = pd.concat([continuous_stats, categorical_stats], ignore_index=True)

# Export to CSV
final_df.to_csv('final_schema_statistics.csv', index=False)

# Optionally, print the DataFrame to verify
print(final_df)
